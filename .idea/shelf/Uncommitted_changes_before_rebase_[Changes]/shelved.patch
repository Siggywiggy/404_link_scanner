Index: 404_link_scanner.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! python3\n# a program to check if all the links on a website are functional\n\nimport re\nimport bs4\nimport requests\nimport logging\nimport pprint\n\nlogging.basicConfig(\n    level=logging.DEBUG, format=\" %(asctime)s -  %(levelname) s -  %(message)s\"\n)\n\nlogging.disable(logging.CRITICAL)\n\nlogging.debug(\"Start of program...\")\n\nheaders = headers = {\n    \"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:122.0) Gecko/20100101 Firefox/122.0\"\n}\n\nstarting_url = 'https://www.kliimaseade.ee'\n\nurl_regex = re.compile(r'(?<![@])(kliimaseade.ee).*')\n#url_regex_shortened = re.compile(f'^(?!.*\\\\b(?:.com|.ee|.eu|.org|mailto)\\\\b).*(?:(/.*/))')\nurl_regex_shortened = re.compile(f'^(?!.*\\\\b(?:.com|.ee|.eu|.org|mailto)\\\\b)(/.*/.*)')\n#url_regex_shortened = re.compile(f'^(?!.*\\\\b(?:.com|.ee|.eu|.org|mailto)\\\\b)(/.*/.*)')\n\n\ndef link_crawler(url):\n    links_list = list()\n    # tuples of parent/child url links\n    links_list.append((url, url))\n    external_links = list()\n    visited_links = list()\n    broken_links = list()\n\n    while links_list:\n        #logging.DEBUG(f'lenght of list is {len(links_list)}')\n        for link in links_list:\n            if link[1] in visited_links:\n                #removing all references to already visited links in the main collection of links\n                links_list = [value for value in links_list if value[1] != link[1]]\n                logging.debug(f'already visited the link {link}, removing {link}')\n                continue\n\n            working_link = link[1]\n            parent_link = link[0]\n            links_list = [value for value in links_list if value[1] != link]\n            visited_links.append(working_link)\n            logging.debug(f'visited links are {visited_links}')\n            #request_object = requests.get(working_link, headers)\n            # check if the download went OK\n            try:\n                request_object = requests.get(working_link, headers)\n                request_object.raise_for_status()\n            except (requests.exceptions.MissingSchema, requests.exceptions.InvalidSchema) as schemaerr:\n                print(f'Something went wrong with downloading: {schemaerr}')\n                continue\n            except requests.exceptions.HTTPError as err:\n                print(f'Something went wrong with downloading: {err}')\n                print(err.response.status_code)\n                #print(err.response.text)\n                print(parent_link, working_link)\n\n                for i, x in enumerate(broken_links):\n                    if working_link == x:\n                        break\n                else:\n                    broken_links.append((parent_link, working_link))\n\n            except (requests.exceptions.ConnectionError) as urlerr:\n                print(f'something went wrong with downloading: {urlerr}')\n\n\n\n            #create soup object and parse it with 'lxml'\n            #request_object.encoding = request_object.apparent_encoding\n            soup_object = bs4.BeautifulSoup(request_object.content, 'lxml')\n\n            all_href_links = soup_object.find_all(\"a\", href=True)\n\n\n\n            for i in all_href_links:\n                new_link = i['href']\n\n                if new_link in visited_links:\n                    continue\n\n                match_object = url_regex.search(new_link)\n                match_object_shortened = url_regex_shortened.search(new_link)\n\n                if match_object:\n                    #logging.debug(f'regex match found! {match_object.group(1)} {new_link}')\n                    for i, x in enumerate(visited_links):\n                        if new_link in x:\n                            logging.debug(f'already have the link in visited_links {new_link}')\n                            break\n                    else:\n                        logging.debug(f'found new link : {new_link}')\n                        links_list.append((working_link, new_link))\n\n                    for i, x in enumerate(links_list):\n                        if new_link in x:\n                            logging.debug(f'already have the link on links_list {new_link}')\n                            break\n                    else:\n                        links_list.append((working_link, new_link))\n\n                elif match_object_shortened:\n                    #print(match_object_shortened.group())\n                    #time.sleep(10)\n                    elongated_url = url + str(match_object_shortened.group())\n                    #print(elongated_url)\n                    #logging.DEBUG(time.sleep(1))\n                    for i, x in enumerate(visited_links):\n                        if elongated_url in x:\n                            logging.debug(f'already have the link in visited_links {new_link}')\n                            break\n                    else:\n                        logging.debug(f'found new link : {new_link}')\n                        links_list.append((working_link, elongated_url))\n\n                    for i, x in enumerate(links_list):\n                        if elongated_url in x:\n                            logging.debug(f'already have the link on links_list {new_link}')\n                            break\n                    else:\n                        links_list.append((working_link, elongated_url))\n                        #logging.DEBUG(f'new link is {new_link}')\n                        #logging.DEBUG(f'adding {new_link} to links_list')\n                        #time.sleep(5)\n\n                elif match_object == None:\n                    #logging.debug(f'found external link {new_link}')\n                    for i, x in enumerate(external_links):\n                        if new_link in x:\n                            logging.debug(f'already seen this external link {new_link}')\n                            break\n                    else:\n                        external_links.append((working_link, new_link))\n                        #time.sleep(5)\n                        logging.debug(f'new link is {new_link}')\n                        logging.debug(f'adding {new_link} to external_links')\n\n\n\n    for external_link in external_links:\n        # check if the link has already been listed in broken links:\n        #logging.DEBUG(f'external link is {str(list(external_link))}')\n        #print(external_links)\n        #time.sleep(10)\n        exists = False\n\n        for i, x in enumerate(broken_links):\n            #logging.DEBUG(f'x is {x}')\n            if external_link[1] in x:\n                logging.debug(f'{external_link[1]} already in broken_links!')\n                exists = True\n                break\n\n         # check if the link has already been visited:\n        for i, x in enumerate(visited_links):\n            if external_link[1] in x:\n                logging.debug(f'{external_link[1]} already in visited_links!')\n                exists = True\n                break\n\n        if not exists:\n            try:\n                request_object = requests.get(external_link[1], headers)\n                request_object.raise_for_status()\n            except (requests.exceptions.MissingSchema, requests.exceptions.InvalidSchema) as schemaerr:\n                print(f'Something went wrong with downloading: {schemaerr}')\n                visited_links.append(external_link)\n\n            except requests.exceptions.HTTPError as err:\n                print(f'Something went wrong with downloading: {err}')\n\n                broken_links.append(external_link)\n            except requests.exceptions.ConnectionError as urlerr:\n                print(f'something went wrong with downloading: {urlerr}')\n                visited_links.append(external_link)\n        else:\n            continue\n    #logging.debug('external links are:')\n    #logging.debug(pprint.pprint(external_links))\n\n    return broken_links\n\n\n\n\n\n\nwebsite_broken_links = link_crawler(starting_url)\npprint.pprint(website_broken_links)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/404_link_scanner.py b/404_link_scanner.py
--- a/404_link_scanner.py	(revision db1e8f57aa604489e8a5a08e1dec2e297b6fb5e5)
+++ b/404_link_scanner.py	(date 1706564451891)
@@ -112,7 +112,7 @@
                     #print(match_object_shortened.group())
                     #time.sleep(10)
                     elongated_url = url + str(match_object_shortened.group())
-                    #print(elongated_url)
+                    print(elongated_url)
                     #logging.DEBUG(time.sleep(1))
                     for i, x in enumerate(visited_links):
                         if elongated_url in x:
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.12 (404_link_scanner)\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (404_link_scanner)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision db1e8f57aa604489e8a5a08e1dec2e297b6fb5e5)
+++ b/.idea/misc.xml	(date 1706564207120)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.12 (404_link_scanner)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (404_link_scanner)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (404_link_checker)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"6b081e0f-71c4-4889-b3b7-4744f106e0ce\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/.idea/404_link_scanner.iml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/modules.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/404_link_scanner.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\"><![CDATA[{\n  \"associatedIndex\": 5\n}]]></component>\n  <component name=\"ProjectId\" id=\"2bdBDPIkik1Uy8ObMbEd9D1lXfA\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"master\"\n  }\n}]]></component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-50da183f06c8-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13135.95\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"6b081e0f-71c4-4889-b3b7-4744f106e0ce\" name=\"Changes\" comment=\"\" />\n      <created>1706534954564</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1706534954564</updated>\n    </task>\n    <servers />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision db1e8f57aa604489e8a5a08e1dec2e297b6fb5e5)
+++ b/.idea/workspace.xml	(date 1706564451930)
@@ -2,13 +2,9 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="6b081e0f-71c4-4889-b3b7-4744f106e0ce" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/404_link_scanner.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/404_link_scanner.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/404_link_scanner.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/404_link_scanner.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/404_link_scanner.py" beforeDir="false" afterPath="$PROJECT_DIR$/404_link_scanner.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,9 +21,9 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 5
-}]]></component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 5
+}</component>
   <component name="ProjectId" id="2bdBDPIkik1Uy8ObMbEd9D1lXfA" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -36,6 +32,7 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "Python.404_link_scanner.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "git-widget-placeholder": "master"
@@ -44,7 +41,7 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-python-sdk-50da183f06c8-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13135.95" />
+        <option value="bundled-python-sdk-5a2391486177-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13763.11" />
       </set>
     </attachedChunks>
   </component>
Index: .idea/404_link_scanner.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/404_link_scanner.iml b/.idea/404_link_scanner.iml
--- a/.idea/404_link_scanner.iml	(revision db1e8f57aa604489e8a5a08e1dec2e297b6fb5e5)
+++ b/.idea/404_link_scanner.iml	(date 1706564207117)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.10 (404_link_checker)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
